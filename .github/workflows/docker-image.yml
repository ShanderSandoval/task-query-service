name: Deploy Docker to EC2 (Amazon Linux)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy Docker App on EC2 (Amazon Linux)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set permissions for SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.HOST_DNS }} >> ~/.ssh/known_hosts

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_IMAGE_NAME }}:latest .
          docker save -o app.tar ${{ secrets.DOCKER_IMAGE_NAME }}:latest

      - name: Check if app.tar exists
        run: |
          if [ ! -f "app.tar" ]; then
            echo "‚ùå ERROR: El archivo app.tar no existe."
            exit 1
          else
            echo "‚úÖ Archivo app.tar encontrado."
          fi

      - name: Set permissions for app.tar
        run: |
          chmod 644 app.tar
          ls -lah app.tar  # Verificar permisos

      - name: Transfer Docker image to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "app.tar"
          target: "${{ secrets.TARGET_DIR }}"
          rm: true

      - name: Run Docker container on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "üìå Verificando e instalando Docker en Amazon Linux..."
            
            # Instalar Docker en Amazon Linux
            sudo yum update -y
            sudo yum install -y docker

            # Iniciar Docker si no est√° corriendo
            sudo systemctl start docker
            sudo systemctl enable docker

            echo "üìå Otorgando permisos al directorio destino..."
            sudo chmod -R 777 ${{ secrets.TARGET_DIR }}

            echo "üìå Cargando la imagen Docker..."
            sudo docker load -i ${{ secrets.TARGET_DIR }}/app.tar

            echo "üìå Verificando si el contenedor ya existe..."
            if sudo docker ps -a --format '{{.Names}}' | grep -q "^${{ secrets.DOCKER_IMAGE_NAME }}$"; then
              echo "üìå Deteniendo y eliminando el contenedor existente..."
              sudo docker stop ${{ secrets.DOCKER_IMAGE_NAME }} || true
              sudo docker rm ${{ secrets.DOCKER_IMAGE_NAME }} || true
            else
              echo "üìå No hay contenedor antiguo. Continuando con el despliegue..."
            fi

            echo "üìå Iniciando el nuevo contenedor con variables de entorno..."
            sudo docker run -d \
              --name ${{ secrets.DOCKER_IMAGE_NAME }} \
              -p 80:10072 \
              -e SPRING_DATA_MONGODB_DATABASE=${{ secrets.SPRING_DATA_MONGODB_DATABASE }} \
              -e SPRING_DATA_MONGODB_URI=${{ secrets.SPRING_DATA_MONGODB_URI }} \
              -e SPRING_DATA_MONGODB_AUTHENTICATION-DATABASE=${{ secrets.SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE }} \
              -e SPRING_KAFKA_BOOTSTRAP-SERVERS=${{ secrets.SPRING_KAFKA_BOOTSTRAP_SERVERS }} \
              ${{ secrets.DOCKER_IMAGE_NAME }}:latest

            echo "‚úÖ Despliegue completado con Docker en Amazon Linux üöÄ"
